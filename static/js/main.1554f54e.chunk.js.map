{"version":3,"sources":["components/fbAuth/FirebaseProvider.js","components/fbAuth/Login.js","components/fbAuth/Register.js","modules/APICalls.js","components/journal/ChrisList.js","components/journal/ChrisListAddForm.js","components/ApplicationViews.js","components/Header.js","App.js","index.js","components/fbAuth/fireBaseConfig.js"],"names":["FirebaseContext","createContext","FirebaseProvider","props","userProfile","sessionStorage","getItem","useState","isLoggedIn","setIsLoggedIn","isFirebaseReady","setIsFirebaseReady","provider","firebase","auth","GoogleAuthProvider","useEffect","onAuthStateChanged","u","Provider","value","login","email","pw","signInWithEmailAndPassword","then","setItem","JSON","stringify","user","logout","signOut","clear","register","password","createUserWithEmailAndPassword","savedUserProfile","console","log","signInWithGoogle","signInWithPopup","children","Spinner","className","Login","history","useHistory","useContext","setEmail","setPassword","Form","onSubmit","e","preventDefault","push","catch","alert","Group","controlId","Label","Control","type","placeholder","onChange","target","Button","variant","onClick","response","to","Register","name","setName","confirmPassword","setConfirmPassword","id","dataURL","ChrisList","listArray","setListArray","fetch","json","data","newArray","Object","keys","map","key","index","fbid","checked","handleCheckChange","event","newListArray","item","Fragment","htmlFor","title","ChrisListAddForm","ApplicationViews","path","exact","Header","aria-current","style","cursor","App","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1554f54e.chunk.js","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n/*\n    The context is imported and used by individual components\n    that need data\n*/\nexport const FirebaseContext = createContext();\n\n/*\n This component establishes what data can be used.\n */\nexport const FirebaseProvider = (props) => {\n\tconst userProfile = sessionStorage.getItem(\"userProfile\");\n\tconst [isLoggedIn, setIsLoggedIn] = useState(userProfile != null);\n\n\tconst [isFirebaseReady, setIsFirebaseReady] = useState(false);\n\n\tconst provider = new firebase.auth.GoogleAuthProvider();\n\n\tuseEffect(() => {\n\t\tfirebase.auth().onAuthStateChanged((u) => {\n\t\t\tsetIsFirebaseReady(true);\n\t\t});\n\t}, []);\n\n\t//setup other firebase logins\n\n\tconst login = (email, pw) => {\n\t\treturn firebase\n\t\t\t.auth()\n\t\t\t.signInWithEmailAndPassword(email, pw)\n\n\t\t\t.then((userProfile) => {\n\t\t\t\tsessionStorage.setItem(\n\t\t\t\t\t\"userProfile\",\n\t\t\t\t\tJSON.stringify(userProfile.user)\n\t\t\t\t);\n\t\t\t\tsetIsLoggedIn(true);\n\t\t\t});\n\t};\n\n\tconst logout = () => {\n\t\treturn firebase\n\t\t\t.auth()\n\t\t\t.signOut()\n\t\t\t.then(() => {\n\t\t\t\tsessionStorage.clear();\n\t\t\t\tsetIsLoggedIn(false);\n\t\t\t});\n\t};\n\n\tconst signInWithGoogle = () => {\n\t\treturn firebase\n\t\t\t.auth()\n\t\t\t.signInWithPopup(provider)\n\t\t\t.then((savedUserProfile) => {\n\t\t\t\tconsole.log(\"savedU\", savedUserProfile);\n\t\t\t\tsessionStorage.setItem(\n\t\t\t\t\t\"userProfile\",\n\t\t\t\t\tJSON.stringify(savedUserProfile.user)\n\t\t\t\t);\n\t\t\t\tsetIsLoggedIn(true);\n\t\t\t});\n\t};\n\n\tconst register = (userProfile, password) => {\n\t\treturn firebase\n\t\t\t.auth()\n\t\t\t.createUserWithEmailAndPassword(userProfile.email, password)\n\t\t\t.then((savedUserProfile) => {\n\t\t\t\tconsole.log(\"savedU\", savedUserProfile);\n\t\t\t\tsessionStorage.setItem(\n\t\t\t\t\t\"userProfile\",\n\t\t\t\t\tJSON.stringify(savedUserProfile.user)\n\t\t\t\t);\n\t\t\t\tsetIsLoggedIn(true);\n\t\t\t});\n\t};\n\n\t/*\n    You return a context provider\n    allow any child elements to access them.\n*/\n\n\treturn (\n\t\t<FirebaseContext.Provider\n\t\t\tvalue={{ isLoggedIn, login, logout, register, signInWithGoogle }}\n\t\t>\n\t\t\t{isFirebaseReady ? (\n\t\t\t\tprops.children\n\t\t\t) : (\n\t\t\t\t<Spinner className=\"app-spinner dark\" />\n\t\t\t)}\n\t\t</FirebaseContext.Provider>\n\t);\n};\n","import React, { useState, useContext } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { FirebaseContext } from \"./FirebaseProvider\";\n\nexport default function Login() {\n\tconst history = useHistory();\n\tconst { login } = useContext(FirebaseContext);\n\tconst { signInWithGoogle } = useContext(FirebaseContext);\n\n\tconst [email, setEmail] = useState();\n\tconst [password, setPassword] = useState();\n\n\tconst loginSubmit = (e) => {\n\t\te.preventDefault();\n\t\tlogin(email, password)\n\t\t\t.then(() => history.push(\"/\"))\n\t\t\t.catch(() => alert(\"Invalid email or password\"));\n\t};\n\n\tconst loginGoogle = () => {\n\t\tsignInWithGoogle().then((response) => history.push(\"/\"));\n\t};\n\n\treturn (\n\t\t<Form className=\"Form\" onSubmit={loginSubmit}>\n\t\t\t<fieldset>\n\t\t\t\t<Form.Group controlId=\"formPlaintextPassword\">\n\t\t\t\t\t<Form.Label>Email: </Form.Label>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tplaceholder=\"Enter email\"\n\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</Form.Group>\n\n\t\t\t\t<Form.Group controlId=\"exampleForm.ControlSelect1\">\n\t\t\t\t\t<Form.Label>Password: </Form.Label>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</Form.Group>\n\n\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\tSubmit\n\t\t\t\t</Button>\n\t\t\t\t<div className=\"or\">\n\t\t\t\t\t- or -\n\t\t\t\t</div>\n\t\t\t\t<Button onClick={loginGoogle} >\n\t\t\t\t\tLogin with Google\n\t\t\t\t</Button>\n\n\t\t\t\t<em>\n\t\t\t\t\t<div className=\"register\">\n\t\t\t\t\t\tNot registered? <Link to=\"register\">Register</Link>\n\t\t\t\t\t</div>\n\t\t\t\t</em>\n\t\t\t</fieldset>\n\t\t</Form>\n\t);\n}\n","import React, { useState, useContext } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport { FirebaseContext } from \"./FirebaseProvider\";\n\nexport default function Register() {\n\tconst history = useHistory();\n\tconst { register } = useContext(FirebaseContext);\n\n\tconst [name, setName] = useState();\n\tconst [email, setEmail] = useState();\n\tconst [password, setPassword] = useState();\n\tconst [confirmPassword, setConfirmPassword] = useState();\n\n\tconst registerClick = (e) => {\n\t\te.preventDefault();\n\t\tif (password && password !== confirmPassword) {\n\t\t\talert(\"Passwords don't match. Do better.\");\n\t\t} else {\n\t\t\tconst userProfile = { name, email };\n\t\t\tregister(userProfile, password).then(() => history.push(\"/\"));\n\t\t}\n\t};\n\n\treturn (\n\t\t<Form className=\"Form\" onSubmit={registerClick}>\n\t\t\t<fieldset>\n\t\t\t\t<Form.Group>\n\t\t\t\t\t<Form.Label>Name</Form.Label>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</Form.Group>\n\t\t\t\t<Form.Group controlId=\"email\">\n\t\t\t\t\t<Form.Label>Email</Form.Label>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</Form.Group>\n\t\t\t\t<Form.Group controlId=\"password\">\n\t\t\t\t\t<Form.Label>Password</Form.Label>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</Form.Group>\n\n\t\t\t\t<Form.Group controlId=\"confirmPassword\">\n\t\t\t\t\t<Form.Label>Confirm Password</Form.Label>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tonChange={(e) => setConfirmPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</Form.Group>\n\n\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\tRegister\n\t\t\t\t</Button>\n\t\t\t</fieldset>\n\t\t</Form>\n\t);\n}\n","const dataURL = \"https://christmaslist-a8957-default-rtdb.firebaseio.com/\";\n\nexport const getAll = () => {\n\treturn fetch(\n\t\t`${dataURL}/christList.json`)\n\t\t//parses the respons and sends it back to the comonent that called for it\n\t\t//implicit return\n\t\t.then(response => response.json())\n};\n\nexport const updateChristmasList = (listObj) => {\n\tconst updateObj = {\n\t\t\"title\": listObj.title\n\t}\n\treturn fetch(`${dataURL}/christmaslist/{listObj.fbid}`,{\n\t\tmethod: \"PUT\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application.json\"\n\t\t},\n\t\tbody: JSON.stringify(updateObj)\n\t})\n}\n","import React, { useEffect, useState } from \"react\";\nimport { getAll } from \"../../modules/APICalls\";\n\nexport const ChrisList = () => {\n\t//defining variable and method to update state\n\tconst [listArray, setListArray] = useState([]);\n\n\t//after component loads, useEffect runs, we get all data and add values \"fbid\" and \"checked\"\n\tuseEffect(() => {\n\t\tgetAll().then((data) => {\n\t\t\t//gets all data as an array, inside the data there is a key, \"object.key\" is native javascript that allows us to access that key, then map over it and add adition properties\n\t\t\tconsole.log(\"data\", data);\n\t\t\tlet newArray = Object.keys(data).map((key, index) => {\n\t\t\t\tdata[key].fbid = key;\n\t\t\t\tdata[key].checked = false;\n\t\t\t\treturn data[key];\n\t\t\t});\n\t\t\tconsole.log(\"newArray\", newArray);\n\t\t\t//calls setListArray to run state again with the new values\n\t\t\tsetListArray(newArray);\n\t\t});\n\t}, []);\n\n\tconst handleCheckChange = (event) => {\n\t\t//what is the id of the item\n\t\tconsole.log(\"event.target.id\", event.target.id);\n\t\t//makes a copy of the array that is in state using a spread operator\n\t\tlet newListArray = [...listArray];\n\t\tnewListArray.map((item) => {\n\t\t\tif (item.fbid === event.target.id) {\n\t\t\t\t//ternary statment, if true set false, if false set to true\n\t\t\t\titem.checked = item.checked ? false : true;\n\t\t\t}\n\t\t\t//returns new item to newListArray\n\t\t\treturn item;\n\t\t});\n\t\t//state change causes return to run again, now with newListArray information\n\t\tsetListArray(newListArray);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div id=\"checklist\">\n\t\t\t\t{listArray.map((item) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<React.Fragment key={item.fbid}>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid={item.fbid}\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={item.checked}\n\t\t\t\t\t\t\t\t//onChange is an event listener, when the listner hears the change it stends an event to handleCheckChange\n\t\t\t\t\t\t\t\tonChange={handleCheckChange}\n\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t<label htmlFor={item.fbid}>{item.title}</label>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n","export const ChrisListAddForm = () => {\n\treturn (\n\t\t<>\n\t\t\t<h4>Add An Item to the Christmas List</h4>\n\t\t</>\n\t);\n};\n","import React, { useContext } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { FirebaseContext } from \"./fbAuth/FirebaseProvider\";\nimport Login from \"./fbAuth/Login\";\nimport Register from \"./fbAuth/Register\";\n// import ChrisListAddForm from \"./ChrisListAddForm\";\nimport { ChrisList } from \"./journal/ChrisList\";\nimport { ChrisListAddForm } from \"./journal/ChrisListAddForm\";\n\n\n\nexport default function ApplicationViews() {\n  const { isLoggedIn } = useContext(FirebaseContext);\n\n  return (\n    <main>\n      <Switch>\n        <Route path=\"/\" exact>\n          {isLoggedIn ? <ChrisList /> : <Redirect to=\"/login\" />}\n        </Route>\n\n        <Route path=\"/add\">\n          {isLoggedIn ? <ChrisListAddForm /> : <Redirect to=\"/login\" />}\n        </Route>\n\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n\n        <Route path=\"/register\">\n          <Register />\n        </Route>\n      </Switch>\n    </main>\n  );\n};","import React, { useState, useContext } from \"react\";\nimport { NavLink as RRNavLink } from \"react-router-dom\";\nimport { FirebaseContext } from \"./fbAuth/FirebaseProvider\";\n\nexport const Header = () => {\n\tconst { isLoggedIn, logout } = useContext(FirebaseContext);\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<h4 className=\"niceList\">Nice List</h4>\n\t\t\t<a\n\t\t\t\taria-current=\"page\"\n\t\t\t\tclassName=\"nav-link\"\n\t\t\t\tstyle={{ cursor: \"pointer\" }}\n\t\t\t\tonClick={logout}\n\t\t\t>\n\t\t\t\tLogout\n\t\t\t</a>\n\t\t</div>\n\t);\n};\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApplicationViews from \"./components/ApplicationViews\";\nimport { Header } from \"./components/Header\";\nimport { FirebaseProvider } from \"./components/fbAuth/FirebaseProvider\";\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t<div className=\"wrapper\">\n\t\t\t<div className=\"snow layer1 a\"></div>\n\t\t\t<div className=\"snow layer1\"></div>\n\t\t\t<div className=\"snow layer2 a\"></div>\n\t\t\t<div className=\"snow layer2\"></div>\n\t\t\t<div className=\"snow layer3 a\"></div>\n\t\t\t<div className=\"snow layer3\"></div>\n\t\t\t<div className=\"content\">\n\t\t\t\t\t<h1>Merry Christmas</h1>\n\t\t\t\t<Router>\n\t\t\t\t\t<FirebaseProvider>\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<ApplicationViews />\n\t\t\t\t\t</FirebaseProvider>\n\t\t\t\t</Router>\n\t\t\t</div>\n\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\"\nimport \"./custom.scss\";\nimport { firebaseConfig } from \"./components/fbAuth/fireBaseConfig\";\nimport firebase from \"firebase/app\";\nimport Login from \"./components/fbAuth/Login\";\nimport { FirebaseProvider } from \"./components/fbAuth/FirebaseProvider\";\n\n\nfirebase.initializeApp(firebaseConfig);\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Router>\n\t\t\t<FirebaseProvider>\n\t\t\t\t<App />\n\t\t\t</FirebaseProvider>\n\t\t</Router>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n","//file for firebase\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nexport const firebaseConfig = {\n\tapiKey: \"AIzaSyDhYIu6EQI0Be8BBJXNTd80H_tffLCLGJQ\",\n\tauthDomain: \"christmaslist-a8957.firebaseapp.com\",\n\tdatabaseURL: \"https://christmaslist-a8957-default-rtdb.firebaseio.com\",\n\tprojectId: \"christmaslist-a8957\",\n\tstorageBucket: \"christmaslist-a8957.appspot.com\",\n\tmessagingSenderId: \"146934597776\",\n\tappId: \"1:146934597776:web:a443d3c3db4540260e3015\",\n\tmeasurementId: \"G-BF1404LWNQ\",\n};\n"],"sourceRoot":""}